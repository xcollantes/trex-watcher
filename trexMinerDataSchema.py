from typing import Dict
import json


class TrexMinerDataSchema:
    """Data object for logs."""

    def __init__(self, logJson: json):
        self.logSchema = {
            "accepted_count": logJson["accepted_count"],
            "active_pool__difficulty": logJson["active_pool"]["difficulty"],
            "active_pool__last_submit_ts": logJson["active_pool"]["last_submit_ts"],
            "active_pool__ping": logJson["active_pool"]["ping"],
            "active_pool__retries": logJson["active_pool"]["retries"],
            "active_pool__url": logJson["active_pool"]["url"],
            "active_pool__user": logJson["active_pool"]["user"],
            "active_pool__worker": logJson["active_pool"]["worker"],
            "algorithm": logJson["algorithm"],
            "api": logJson["api"],
            "build_date": logJson["build_date"],
            "coin": logJson["coin"],
            "description": logJson["description"],
            "driver": logJson["driver"],
            "gpu_total": logJson["gpu_total"],
            "gpus__cclock": logJson["gpus"]["cclock"],
            "gpus__dag_build_mode": logJson["gpus"]["dag_build_mode"],
            "gpus__device_id": logJson["gpus"]["device_id"],
            "gpus__efficiency": logJson["gpus"]["efficiency"],
            "gpus__fan_speed": logJson["gpus"]["fan_speed"],
            "gpus__gpu_id": logJson["gpus"]["gpu_id"],
            "gpus__gpu_user_id": logJson["gpus"]["gpu_user_id"],
            "gpus__hashrate": logJson["gpus"]["hashrate"],
            "gpus__hashrate_day": logJson["gpus"]["hashrate_day"],
            "gpus__hashrate_hour": logJson["gpus"]["hashrate_hour"],
            "gpus__hashrate_instant": logJson["gpus"]["hashrate_instant"],
            "gpus__hashrate_minute": logJson["gpus"]["hashrate_minute"],
            "gpus__intensity": logJson["gpus"]["intensity"],
            "gpus__lhr_tune": logJson["gpus"]["lhr_tune"],
            "gpus__low_load": logJson["gpus"]["low_load"],
            "gpus__mclock": logJson["gpus"]["mclock"],
            "gpus__mtweak": logJson["gpus"]["mtweak"],
            "gpus__name": logJson["gpus"]["name"],
            "gpus__paused": logJson["gpus"]["paused"],
            "gpus__pci_bus": logJson["gpus"]["pci_bus"],
            "gpus__pci_domain": logJson["gpus"]["pci_domain"],
            "gpus__pci_id": logJson["gpus"]["pci_id"],
            "gpus__potentially_unstable": logJson["gpus"]["potentially_unstable"],
            "gpus__power": logJson["gpus"]["power"],
            "gpus__power_avr": logJson["gpus"]["power_avr"],
            "gpus__shares__accepted_count": logJson["gpus"][0]["shares"]["accepted_count"],
            "gpus__shares__invalid_count": logJson["gpus"][0]["shares"]["invalid_count"],
            "gpus__shares__last_share_diff": logJson["gpus"][0]["shares"]["last_share_diff"],
            "gpus__shares__last_share_submit_ts": logJson["gpus"][0]["shares"]["last_share_submit_ts"],
            "gpus__shares__max_share_diff": logJson["gpus"][0]["shares"]["max_share_diff"],
            "gpus__shares__max_share_submit_ts": logJson["gpus"][0]["shares"]["max_share_submit_ts"],
            "gpus__shares__rejected_count": logJson["gpus"][0]["shares"]["rejected_count"],
            "gpus__shares__solved_count": logJson["gpus"][0]["shares"]["solved_count"],
            "gpus__temperature": logJson["temperature"],
            "gpus__uuid": logJson["uuid"],
            "gpus__vendor": logJson["vendor"],
            "hashrate": logJson["hashrate"],
            "hashrate_day": logJson["hashrate_day"],
            "hashrate_hour": logJson["hashrate_hour"],
            "hashrate_minute": logJson["hashrate_minute"],
            "invalid_count": logJson["invalid_count"],
            "name": logJson["name"],
            "os": logJson["os"],
            "paused": logJson["paused"],
            "rejected_count": logJson["rejected_count"],
            "revision": logJson["revision"],
            "sharerate": logJson["sharerate"],
            "sharerate_average": logJson["sharerate_average"],
            "solved_count": logJson["solved_count"],
            "success": logJson["success"],
            "time": logJson["time"],
            "downloaded_bytes": logJson["downloaded_bytes"],
            "last_error": logJson["last_error"],
            "time_elapsed_sec": logJson["time_elapsed_sec"],
            "total_bytes": logJson["total_bytes"],
            "update_in_progress": logJson["update_in_progress"],
            "update_state": logJson["update_state"],
            "url": logJson["url"],
            "md5sum": logJson["md5sum"],
            "notes": logJson["notes"],
            "notes_full": logJson["notes_full"],
            "url": logJson["url"],
            "version": logJson["version"],
            "uptime": logJson["uptime"],
            "validate_shares": logJson["validate_shares"],
            "version": logJson["version"],
            "built_in": logJson["built_in"],
            "startup_ts": logJson["startup_ts"],
            "total_restarts": logJson["total_restarts"],
            "uptime": logJson["uptime"],
            "wd_version": logJson["wd_version"]
        }

    def getSchema(self) -> Dict:
        """Return log object in dictionary."""
        return self.logSchema
